from aiogram.dispatcher.filters import Command
from main import bot, dp
from aiogram.types import Message
from config import admin_id
from users.keyboards import main_menu, back_to_main
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from datetime import date, datetime, timedelta
import json

MAIN_MENU_TEXT = "<b>üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>\n\n" \
                 "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ. –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞, " \
                 "–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href=\"https://telegra.ph/Princip-raboty-bota-10-05\">–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>."


class GetUp(StatesGroup):
    GA1 = State()


class Sleep(StatesGroup):
    S1 = State()


@dp.message_handler(lambda m: m.chat.id != admin_id, Command("start"))
async def start_join(message: Message):
    if str(message.from_user.id) != str(admin_id):
        with open('users_DB/' + str(message.from_user.id) + '.json', 'w', encoding='utf8') as write_data_file:
            json.dump(json.loads(str(message.from_user)), write_data_file, ensure_ascii=False)
        write_data_file.close()

    await message.answer(text=MAIN_MENU_TEXT, disable_web_page_preview=True, reply_markup=main_menu)


@dp.message_handler(lambda m: m.chat.id != admin_id, text="–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è ‚òÄÔ∏è", state=None)
async def take_id(message: Message):
    await message.answer(text="<b>üïî –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n<code>"
                              "17:50  => 17:50\n"
                              "1420  => 14:20\n"
                              "6 4  => 06:04\n"
                              "9  => 09:00</code>", reply_markup=back_to_main)

    await GetUp.GA1.set()


@dp.message_handler(lambda m: m.chat.id != admin_id, state=GetUp.GA1)
async def search_info(message: Message, state: FSMContext):
    if str(message.text) == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer(text=MAIN_MENU_TEXT, disable_web_page_preview=True, reply_markup=main_menu)
        await state.finish()
    else:
        time = None

        if len(str(message.text)) == 5 and str(message.text)[2] == ':':
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[3:5]))
            except:
                time = None

        elif len(str(message.text)) == 4 and str(message.text)[1] != ' ' and str(message.text)[2] != ' ':
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[2:4]))
            except:
                time = None
        elif (len(str(message.text)) == 3 or len(str(message.text)) == 4 or len(str(message.text)) == 5) and (
                str(message.text)[1] == ' ' or str(message.text)[2] == ' '):
            if len(str(message.text)) == 3:
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0]), int(str(message.text)[2]))
                except:
                    time = None
            elif len(str(message.text)) == 4 and str(message.text)[1] == ' ':
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0]), int(str(message.text)[2:4]))
                except:
                    time = None
            elif len(str(message.text)) == 5:
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[3:5]))
                except:
                    time = None
        elif len(str(message.text)) == 1 or len(str(message.text)) == 2:
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), 0)
            except:
                time = None

        if time is not None:
            time_to_text = time
            all_times = []
            for i in range(0, 6):
                time -= timedelta(minutes=90)
                all_times.insert(0, time.strftime('%H:%M'))

            await message.answer(
                text=f"‚òÄÔ∏è <b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤ {time_to_text.strftime('%H:%M')}, —Ç–æ –Ω—É–∂–Ω–æ –ª–µ—á—å —Å–ø–∞—Ç—å –≤:\n\n\n</b>"
                     f"<b><u>{all_times[0]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 9 —á–∞—Å–æ–≤.</i>\n\n"
                     f"<b><u>{all_times[1]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 7.5 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[2]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 6 —á–∞—Å–æ–≤.</i>\n\n"
                     f"<b><u>{all_times[3]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 4.5 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[4]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 3 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[5]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 1.5 —á–∞—Å–∞.</i>\n\n"
                     f"‚Äî‚Äî‚Äî\n"
                     f"<i>–í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –£–ñ–ï –¥–æ–ª–∂–Ω—ã —Å–ø–∞—Ç—å, –∞ –ù–ï –∑–∞—Å—ã–ø–∞—Ç—å. –ü–æ—ç—Ç–æ–º—É, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ "
                     f"–≤—Ä–µ–º—è –Ω–∞ —Å–≤–æ—ë –∑–∞—Å—ã–ø–∞–Ω–∏–µ.</i>",
                reply_markup=main_menu)

            await state.finish()
        else:
            await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                                 reply_markup=back_to_main)
            await GetUp.GA1.set()


@dp.message_handler(lambda m: m.chat.id != admin_id, text="–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ª–µ—á—å —Å–ø–∞—Ç—å üõå", state=None)
async def take_id(message: Message):
    await message.answer(text="<b>üïî –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n<code>"
                              "17:50  => 17:50\n"
                              "1420  => 14:20\n"
                              "6 4  => 06:04\n"
                              "9  => 09:00</code>\n\n"
                              "‚Äî‚Äî‚Äî\n"
                              "<i>–í –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –≤—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –£–ñ–ï –¥–æ–ª–∂–Ω—ã —Å–ø–∞—Ç—å, –∞ –ù–ï –∑–∞—Å—ã–ø–∞—Ç—å. –ü–æ—ç—Ç–æ–º—É, "
                              "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Å–≤–æ—ë –∑–∞—Å—ã–ø–∞–Ω–∏–µ.</i>",
                         reply_markup=back_to_main)

    await Sleep.S1.set()


@dp.message_handler(lambda m: m.chat.id != admin_id, state=Sleep.S1)
async def search_info(message: Message, state: FSMContext):
    if str(message.text) == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer(text=MAIN_MENU_TEXT, disable_web_page_preview=True, reply_markup=main_menu)
        await state.finish()
    else:
        time = None

        if len(str(message.text)) == 5 and str(message.text)[2] == ':':
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[3:5]))
            except:
                time = None

        elif len(str(message.text)) == 4 and str(message.text)[1] != ' ' and str(message.text)[2] != ' ':
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[2:4]))
            except:
                time = None
        elif (len(str(message.text)) == 3 or len(str(message.text)) == 4 or len(str(message.text)) == 5) and (
                str(message.text)[1] == ' ' or str(message.text)[2] == ' '):
            if len(str(message.text)) == 3:
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0]), int(str(message.text)[2]))
                except:
                    time = None
            elif len(str(message.text)) == 4 and str(message.text)[1] == ' ':
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0]), int(str(message.text)[2:4]))
                except:
                    time = None
            elif len(str(message.text)) == 5:
                try:
                    time = datetime(10, 10, 10, int(str(message.text)[0:2]), int(str(message.text)[3:5]))
                except:
                    time = None
        elif len(str(message.text)) == 1 or len(str(message.text)) == 2:
            try:
                time = datetime(10, 10, 10, int(str(message.text)[0:2]), 0)
            except:
                time = None
        if time is not None:
            time_to_text = time
            all_times = []
            for i in range(0, 6):
                time += timedelta(minutes=90)
                all_times.append(time.strftime('%H:%M'))

            await message.answer(
                text=f"üõå <b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–µ—á—å —Å–ø–∞—Ç—å –≤ {time_to_text.strftime('%H:%M')}, "
                     f"—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤:\n\n\n</b>"
                     f"<b><u>{all_times[0]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 1.5 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[1]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 3 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[2]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 4.5 —á–∞—Å–∞.</i>\n\n"
                     f"<b><u>{all_times[3]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 6 —á–∞—Å–æ–≤.</i>\n\n"
                     f"<b><u>{all_times[4]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 7.5 —á–∞—Å–æ–≤.</i>\n\n"
                     f"<b><u>{all_times[5]}</u></b> | <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: 9 —á–∞—Å–æ–≤.</i>",
                reply_markup=main_menu)

            await state.finish()
        else:
            await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                                 reply_markup=back_to_main)
            await Sleep.S1.set()


@dp.message_handler(lambda m: m.chat.id != admin_id, text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def take_id(message: Message):
    await message.answer(text=MAIN_MENU_TEXT, disable_web_page_preview=True, reply_markup=main_menu)
